// Code generated by Godin v{{ .Godin.Version }}; DO NOT EDIT.
package subscriber

import (
	godinAMQP "github.com/lukasjarosch/godin/pkg/amqp"
	"github.com/go-godin/log"
	"github.com/streadway/amqp"
)

{{- $serviceName := title .Service.Name -}}

{{ range .Service.Subscriber }}
func Init{{ .Handler }}(channel *amqp.Channel, svc service.{{ $serviceName }}, logger log.Logger) (subscriber godinAMQP.Subscriber, err error) {
	subscription := &godinAMQP.Subscription{
		Exchange: "{{ .Subscription.Exchange }}",
		AutoAck:  {{ .Subscription.AutoAck }},
		Queue: godinAMQP.SubscriptionQueue{
			AutoDelete: {{ .Subscription.Queue.AutoDelete }},
			Durable:    {{ .Subscription.Queue.Durable }},
			Exclusive:  {{ .Subscription.Queue.Exclusive }},
			Name:       "{{ .Subscription.Queue.Name }}",
			NoWait:     {{ .Subscription.Queue.NoWait }},
		},
		Topic: "{{ .Subscription.Topic }}",
	}
	subscriber = godinAMQP.NewSubscriber(channel, subscription)
	if err = subscriber.Subscribe({{ .Handler }}(logger, svc)); err != nil {
		logger.Error("failed to subscribe to {{ .Subscription.Topic }}", "err", err)
		return subscriber, err
	}
	logger.Info("subscribed to topic '{{ .Subscription.Topic }}'", "topic", subscription.Topic, "queue", subscription.Queue.Name, "exchange", subscription.Exchange)
	return subscriber, nil
}
{{ end }}
