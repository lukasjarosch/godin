// Code generated by Godin v0.3.0; DO NOT EDIT.

package grpc

import (
	"context"
	"errors"

	kitGrpc "github.com/go-kit/kit/transport/grpc"

	service "github.com/lukasjarosch/godin/examples/user"
	pb "github.com/lukasjarosch/godin/examples/user/api"
)

type grpcServer struct {
	CreateHandler kitGrpc.Handler
}

func NewServer(endpoints endpoint.Set, logger log.Logger) pb.UserServiceServer {
	// TODO: configurable ServerOptions via godin.json
	options := []kitGrpc.ServerOption{}

	return &grpcServer{
		CreateHandler: kitGrpc.NewServer(
			endpoints.CreateEndpoint,
			DecodeCreateRequest,
			EncodeCreateResponse,
			append(options)...,
		),
	}
}

func (s *grpcServer) Create(ctx context.Context, req *pb.CreateRequest) (*pb.CreateResponse, error) {
	_, resp, err := s.CreateHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.CreateResponse), nil
}
