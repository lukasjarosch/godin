// Code generated by Godin v0.3.0.
// This file can be modified, it will NOT be overwritten by godin.

package endpoint

import (
    "context"
    "github.com/go-kit/kit/endpoint"

    service "yyy"
)



// HelloEndpoint provides service.Hello() as general endpoint
// which can be used with arbitrary transport layers.
func HelloEndpoint(service service.Yyy) endpoint.Endpoint {
    return func (ctx context.Context, request interface{}) (response interface{}, err error) {
        req := request.(HelloRequest)
        greeting,err := service.Hello(ctx,req.Name,)

        return HelloResponse{
            Greeting: greeting,
            Err: err,
        }, err
    }
}



// Hello2Endpoint provides service.Hello2() as general endpoint
// which can be used with arbitrary transport layers.
func Hello2Endpoint(service service.Yyy) endpoint.Endpoint {
    return func (ctx context.Context, request interface{}) (response interface{}, err error) {
        req := request.(Hello2Request)
        greeting,err := service.Hello2(ctx,req.Name,)

        return Hello2Response{
            Greeting: greeting,
            Err: err,
        }, err
    }
}



// Hello3Endpoint provides service.Hello3() as general endpoint
// which can be used with arbitrary transport layers.
func Hello3Endpoint(service service.Yyy) endpoint.Endpoint {
    return func (ctx context.Context, request interface{}) (response interface{}, err error) {
        req := request.(Hello3Request)
        greeting,err := service.Hello3(ctx,req.Name,)

        return Hello3Response{
            Greeting: greeting,
            Err: err,
        }, err
    }
}



// Hello4Endpoint provides service.Hello4() as general endpoint
// which can be used with arbitrary transport layers.
func Hello4Endpoint(service service.Yyy) endpoint.Endpoint {
    return func (ctx context.Context, request interface{}) (response interface{}, err error) {
        req := request.(Hello4Request)
        greeting,err := service.Hello4(ctx,req.Name,)

        return Hello4Response{
            Greeting: greeting,
            Err: err,
        }, err
    }
}



// Hello5Endpoint provides service.Hello5() as general endpoint
// which can be used with arbitrary transport layers.
func Hello5Endpoint(service service.Yyy) endpoint.Endpoint {
    return func (ctx context.Context, request interface{}) (response interface{}, err error) {
        req := request.(Hello5Request)
        greeting,err := service.Hello5(ctx,req.Name,)

        return Hello5Response{
            Greeting: greeting,
            Err: err,
        }, err
    }
}



// Hello6Endpoint provides service.Hello6() as general endpoint
// which can be used with arbitrary transport layers.
func Hello6Endpoint(service service.Yyy) endpoint.Endpoint {
    return func (ctx context.Context, request interface{}) (response interface{}, err error) {
        req := request.(Hello6Request)
        greeting,err := service.Hello6(ctx,req.Name,)

        return Hello6Response{
            Greeting: greeting,
            Err: err,
        }, err
    }
}



// Hello7Endpoint provides service.Hello7() as general endpoint
// which can be used with arbitrary transport layers.
func Hello7Endpoint(service service.Yyy) endpoint.Endpoint {
    return func (ctx context.Context, request interface{}) (response interface{}, err error) {
        req := request.(Hello7Request)
        greeting,err := service.Hello7(ctx,req.Name,)

        return Hello7Response{
            Greeting: greeting,
            Err: err,
        }, err
    }
}



// Hello8Endpoint provides service.Hello8() as general endpoint
// which can be used with arbitrary transport layers.
func Hello8Endpoint(service service.Yyy) endpoint.Endpoint {
    return func (ctx context.Context, request interface{}) (response interface{}, err error) {
        req := request.(Hello8Request)
        greeting,err := service.Hello8(ctx,req.Name,)

        return Hello8Response{
            Greeting: greeting,
            Err: err,
        }, err
    }
}



// Hello9Endpoint provides service.Hello9() as general endpoint
// which can be used with arbitrary transport layers.
func Hello9Endpoint(service service.Yyy) endpoint.Endpoint {
    return func (ctx context.Context, request interface{}) (response interface{}, err error) {
        req := request.(Hello9Request)
        greeting,err := service.Hello9(ctx,req.Name,req.Foo,req.Bar,)

        return Hello9Response{
            Greeting: greeting,
            Err: err,
        }, err
    }
}

