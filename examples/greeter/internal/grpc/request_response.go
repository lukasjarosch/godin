// Code generated by Godin v0.3.0; DO NOT EDIT.

package grpc

import (
	"context"
	"errors"

	service "yyy"
)

// EncodeHelloRequest is used in the server and encodes a domain-level request into a gRPC request
func EncodeHelloRequest(ctx context.Context, request endpoint.HelloRequest) (pbRequest *pb.HelloRequest, err error) {
	if request == nil {
		return nil, errors.New("nil HelloRequest")
	}
	req := request.(endpoint.HelloRequest)
	pbRequest, err := HelloRequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHelloResponse is used in the server and decodes a gRPC response into a domain-level response
func DecodeHelloResponse(ctx context.Context, pbResponse *pb.HelloResponse) (response endpoint.HelloResponse, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil HelloResponse")
	}
	response, err := HelloResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHelloResponse is used in the client and encodes a domain-level response into a gRPC response
func EncodeHelloResponse(ctx context.Context, response endpoint.HelloResponse) (pbResponse *pb.HelloResponse, err error) {
	if response == nil {
		return nil, errors.New("nil HelloResponse")
	}
	res := response.(endpoint.HelloResponse)
	pbResponse, err := HelloResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHelloRequest is used in the client and decodes a gRPC request into a domain-level request
func DecodeHelloRequest(ctx context.Context, pbRequest *pb.HelloRequest) (request endpoint.HelloRequest, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil HelloRequest")
	}
	request, err := HelloRequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}

// EncodeHello2Request is used in the server and encodes a domain-level request into a gRPC request
func EncodeHello2Request(ctx context.Context, request endpoint.Hello2Request) (pbRequest *pb.Hello2Request, err error) {
	if request == nil {
		return nil, errors.New("nil Hello2Request")
	}
	req := request.(endpoint.Hello2Request)
	pbRequest, err := Hello2RequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHello2Response is used in the server and decodes a gRPC response into a domain-level response
func DecodeHello2Response(ctx context.Context, pbResponse *pb.Hello2ULTRAResponse) (response endpoint.Hello2Response, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil Hello2Response")
	}
	response, err := Hello2ResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHello2Response is used in the client and encodes a domain-level response into a gRPC response
func EncodeHello2Response(ctx context.Context, response endpoint.Hello2Response) (pbResponse *pb.Hello2ULTRAResponse, err error) {
	if response == nil {
		return nil, errors.New("nil Hello2Response")
	}
	res := response.(endpoint.Hello2Response)
	pbResponse, err := Hello2ResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHello2Request is used in the client and decodes a gRPC request into a domain-level request
func DecodeHello2Request(ctx context.Context, pbRequest *pb.Hello2Request) (request endpoint.Hello2Request, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil Hello2Request")
	}
	request, err := Hello2RequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}

// EncodeHello3Request is used in the server and encodes a domain-level request into a gRPC request
func EncodeHello3Request(ctx context.Context, request endpoint.Hello3Request) (pbRequest *pb.Hello3Request, err error) {
	if request == nil {
		return nil, errors.New("nil Hello3Request")
	}
	req := request.(endpoint.Hello3Request)
	pbRequest, err := Hello3RequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHello3Response is used in the server and decodes a gRPC response into a domain-level response
func DecodeHello3Response(ctx context.Context, pbResponse *pb.Hello3Response) (response endpoint.Hello3Response, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil Hello3Response")
	}
	response, err := Hello3ResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHello3Response is used in the client and encodes a domain-level response into a gRPC response
func EncodeHello3Response(ctx context.Context, response endpoint.Hello3Response) (pbResponse *pb.Hello3Response, err error) {
	if response == nil {
		return nil, errors.New("nil Hello3Response")
	}
	res := response.(endpoint.Hello3Response)
	pbResponse, err := Hello3ResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHello3Request is used in the client and decodes a gRPC request into a domain-level request
func DecodeHello3Request(ctx context.Context, pbRequest *pb.Hello3Request) (request endpoint.Hello3Request, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil Hello3Request")
	}
	request, err := Hello3RequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}

// EncodeHello4Request is used in the server and encodes a domain-level request into a gRPC request
func EncodeHello4Request(ctx context.Context, request endpoint.Hello4Request) (pbRequest *pb.Hello4Request, err error) {
	if request == nil {
		return nil, errors.New("nil Hello4Request")
	}
	req := request.(endpoint.Hello4Request)
	pbRequest, err := Hello4RequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHello4Response is used in the server and decodes a gRPC response into a domain-level response
func DecodeHello4Response(ctx context.Context, pbResponse *pb.Hello4Response) (response endpoint.Hello4Response, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil Hello4Response")
	}
	response, err := Hello4ResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHello4Response is used in the client and encodes a domain-level response into a gRPC response
func EncodeHello4Response(ctx context.Context, response endpoint.Hello4Response) (pbResponse *pb.Hello4Response, err error) {
	if response == nil {
		return nil, errors.New("nil Hello4Response")
	}
	res := response.(endpoint.Hello4Response)
	pbResponse, err := Hello4ResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHello4Request is used in the client and decodes a gRPC request into a domain-level request
func DecodeHello4Request(ctx context.Context, pbRequest *pb.Hello4Request) (request endpoint.Hello4Request, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil Hello4Request")
	}
	request, err := Hello4RequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}

// EncodeHello5Request is used in the server and encodes a domain-level request into a gRPC request
func EncodeHello5Request(ctx context.Context, request endpoint.Hello5Request) (pbRequest *pb.Hello5Request, err error) {
	if request == nil {
		return nil, errors.New("nil Hello5Request")
	}
	req := request.(endpoint.Hello5Request)
	pbRequest, err := Hello5RequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHello5Response is used in the server and decodes a gRPC response into a domain-level response
func DecodeHello5Response(ctx context.Context, pbResponse *pb.Hello5Response) (response endpoint.Hello5Response, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil Hello5Response")
	}
	response, err := Hello5ResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHello5Response is used in the client and encodes a domain-level response into a gRPC response
func EncodeHello5Response(ctx context.Context, response endpoint.Hello5Response) (pbResponse *pb.Hello5Response, err error) {
	if response == nil {
		return nil, errors.New("nil Hello5Response")
	}
	res := response.(endpoint.Hello5Response)
	pbResponse, err := Hello5ResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHello5Request is used in the client and decodes a gRPC request into a domain-level request
func DecodeHello5Request(ctx context.Context, pbRequest *pb.Hello5Request) (request endpoint.Hello5Request, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil Hello5Request")
	}
	request, err := Hello5RequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}

// EncodeHello6Request is used in the server and encodes a domain-level request into a gRPC request
func EncodeHello6Request(ctx context.Context, request endpoint.Hello6Request) (pbRequest *pb.Hello6Request, err error) {
	if request == nil {
		return nil, errors.New("nil Hello6Request")
	}
	req := request.(endpoint.Hello6Request)
	pbRequest, err := Hello6RequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHello6Response is used in the server and decodes a gRPC response into a domain-level response
func DecodeHello6Response(ctx context.Context, pbResponse *pb.Hello6Response) (response endpoint.Hello6Response, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil Hello6Response")
	}
	response, err := Hello6ResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHello6Response is used in the client and encodes a domain-level response into a gRPC response
func EncodeHello6Response(ctx context.Context, response endpoint.Hello6Response) (pbResponse *pb.Hello6Response, err error) {
	if response == nil {
		return nil, errors.New("nil Hello6Response")
	}
	res := response.(endpoint.Hello6Response)
	pbResponse, err := Hello6ResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHello6Request is used in the client and decodes a gRPC request into a domain-level request
func DecodeHello6Request(ctx context.Context, pbRequest *pb.Hello6Request) (request endpoint.Hello6Request, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil Hello6Request")
	}
	request, err := Hello6RequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}

// EncodeHello7Request is used in the server and encodes a domain-level request into a gRPC request
func EncodeHello7Request(ctx context.Context, request endpoint.Hello7Request) (pbRequest *pb.Hello7Request, err error) {
	if request == nil {
		return nil, errors.New("nil Hello7Request")
	}
	req := request.(endpoint.Hello7Request)
	pbRequest, err := Hello7RequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHello7Response is used in the server and decodes a gRPC response into a domain-level response
func DecodeHello7Response(ctx context.Context, pbResponse *pb.Hello7Response) (response endpoint.Hello7Response, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil Hello7Response")
	}
	response, err := Hello7ResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHello7Response is used in the client and encodes a domain-level response into a gRPC response
func EncodeHello7Response(ctx context.Context, response endpoint.Hello7Response) (pbResponse *pb.Hello7Response, err error) {
	if response == nil {
		return nil, errors.New("nil Hello7Response")
	}
	res := response.(endpoint.Hello7Response)
	pbResponse, err := Hello7ResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHello7Request is used in the client and decodes a gRPC request into a domain-level request
func DecodeHello7Request(ctx context.Context, pbRequest *pb.Hello7Request) (request endpoint.Hello7Request, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil Hello7Request")
	}
	request, err := Hello7RequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}

// EncodeHello8Request is used in the server and encodes a domain-level request into a gRPC request
func EncodeHello8Request(ctx context.Context, request endpoint.Hello8Request) (pbRequest *pb.Hello8Request, err error) {
	if request == nil {
		return nil, errors.New("nil Hello8Request")
	}
	req := request.(endpoint.Hello8Request)
	pbRequest, err := Hello8RequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHello8Response is used in the server and decodes a gRPC response into a domain-level response
func DecodeHello8Response(ctx context.Context, pbResponse *pb.Hello8Response) (response endpoint.Hello8Response, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil Hello8Response")
	}
	response, err := Hello8ResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHello8Response is used in the client and encodes a domain-level response into a gRPC response
func EncodeHello8Response(ctx context.Context, response endpoint.Hello8Response) (pbResponse *pb.Hello8Response, err error) {
	if response == nil {
		return nil, errors.New("nil Hello8Response")
	}
	res := response.(endpoint.Hello8Response)
	pbResponse, err := Hello8ResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHello8Request is used in the client and decodes a gRPC request into a domain-level request
func DecodeHello8Request(ctx context.Context, pbRequest *pb.Hello8Request) (request endpoint.Hello8Request, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil Hello8Request")
	}
	request, err := Hello8RequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}

// EncodeHello9Request is used in the server and encodes a domain-level request into a gRPC request
func EncodeHello9Request(ctx context.Context, request endpoint.Hello9Request) (pbRequest *pb.Hello9Request, err error) {
	if request == nil {
		return nil, errors.New("nil Hello9Request")
	}
	req := request.(endpoint.Hello9Request)
	pbRequest, err := Hello9RequestEncoder(req)
	if err != nil {
		return nil, err
	}
	return pbRequest, nil
}

// DecodeHello9Response is used in the server and decodes a gRPC response into a domain-level response
func DecodeHello9Response(ctx context.Context, pbResponse *pb.Hello9Response) (response endpoint.Hello9Response, err error) {
	if pbResponse == nil {
		return nil, errors.New("nil Hello9Response")
	}
	response, err := Hello9ResponseDecoder(res)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EncodeHello9Response is used in the client and encodes a domain-level response into a gRPC response
func EncodeHello9Response(ctx context.Context, response endpoint.Hello9Response) (pbResponse *pb.Hello9Response, err error) {
	if response == nil {
		return nil, errors.New("nil Hello9Response")
	}
	res := response.(endpoint.Hello9Response)
	pbResponse, err := Hello9ResponseEncoder(res)
	if err != nil {
		return nil, err
	}
	return pbResponse, nil
}

// DecodeHello9Request is used in the client and decodes a gRPC request into a domain-level request
func DecodeHello9Request(ctx context.Context, pbRequest *pb.Hello9Request) (request endpoint.Hello9Request, err error) {
	if pbRequest == nil {
		return nil, errors.New("nil Hello9Request")
	}
	request, err := Hello9RequestDecoder(req)
	if err != nil {
		return nil, err
	}
	return request, nil
}
