// Code generated by Godin v0.3.0; DO NOT EDIT.

package grpc

import (
	"context"
	"errors"

	kitGrpc "github.com/go-kit/kit/transport/grpc"

	service "yyy"
	pb "yyy/api"
)

type grpcServer struct {
	HelloHandler  kitGrpc.Handler
	Hello2Handler kitGrpc.Handler
	Hello3Handler kitGrpc.Handler
	Hello4Handler kitGrpc.Handler
	Hello5Handler kitGrpc.Handler
	Hello6Handler kitGrpc.Handler
	Hello7Handler kitGrpc.Handler
	Hello8Handler kitGrpc.Handler
	Hello9Handler kitGrpc.Handler
}

func NewServer(endpoints endpoint.Set, logger log.Logger) pb.yyyServer {
	// TODO: configurable ServerOptions via godin.json
	options := []kitGrpc.ServerOption{}

	return &grpcServer{
		HelloHandler: kitGrpc.NewServer(
			endpoints.HelloEndpoint,
			DecodeHelloRequest,
			EncodeHelloResponse,
			append(options)...,
		),
		Hello2Handler: kitGrpc.NewServer(
			endpoints.Hello2Endpoint,
			DecodeHello2Request,
			EncodeHello2Response,
			append(options)...,
		),
		Hello3Handler: kitGrpc.NewServer(
			endpoints.Hello3Endpoint,
			DecodeHello3Request,
			EncodeHello3Response,
			append(options)...,
		),
		Hello4Handler: kitGrpc.NewServer(
			endpoints.Hello4Endpoint,
			DecodeHello4Request,
			EncodeHello4Response,
			append(options)...,
		),
		Hello5Handler: kitGrpc.NewServer(
			endpoints.Hello5Endpoint,
			DecodeHello5Request,
			EncodeHello5Response,
			append(options)...,
		),
		Hello6Handler: kitGrpc.NewServer(
			endpoints.Hello6Endpoint,
			DecodeHello6Request,
			EncodeHello6Response,
			append(options)...,
		),
		Hello7Handler: kitGrpc.NewServer(
			endpoints.Hello7Endpoint,
			DecodeHello7Request,
			EncodeHello7Response,
			append(options)...,
		),
		Hello8Handler: kitGrpc.NewServer(
			endpoints.Hello8Endpoint,
			DecodeHello8Request,
			EncodeHello8Response,
			append(options)...,
		),
		Hello9Handler: kitGrpc.NewServer(
			endpoints.Hello9Endpoint,
			DecodeHello9Request,
			EncodeHello9Response,
			append(options)...,
		),
	}
}

func (s *grpcServer) Hello(ctx context.Context, req *pb.HelloRequest) (*pb.HelloResponse, error) {
	_, resp, err := s.HelloHandler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.HelloResponse), nil
}

func (s *grpcServer) Hello2(ctx context.Context, req *pb.Hello2Request) (*pb.Hello2ULTRAResponse, error) {
	_, resp, err := s.Hello2Handler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.Hello2ULTRAResponse), nil
}

func (s *grpcServer) Hello3(ctx context.Context, req *pb.Hello3Request) (*pb.Hello3Response, error) {
	_, resp, err := s.Hello3Handler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.Hello3Response), nil
}

func (s *grpcServer) Hello4(ctx context.Context, req *pb.Hello4Request) (*pb.Hello4Response, error) {
	_, resp, err := s.Hello4Handler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.Hello4Response), nil
}

func (s *grpcServer) Hello5(ctx context.Context, req *pb.Hello5Request) (*pb.Hello5Response, error) {
	_, resp, err := s.Hello5Handler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.Hello5Response), nil
}

func (s *grpcServer) Hello6(ctx context.Context, req *pb.Hello6Request) (*pb.Hello6Response, error) {
	_, resp, err := s.Hello6Handler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.Hello6Response), nil
}

func (s *grpcServer) Hello7(ctx context.Context, req *pb.Hello7Request) (*pb.Hello7Response, error) {
	_, resp, err := s.Hello7Handler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.Hello7Response), nil
}

func (s *grpcServer) Hello8(ctx context.Context, req *pb.Hello8Request) (*pb.Hello8Response, error) {
	_, resp, err := s.Hello8Handler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.Hello8Response), nil
}

func (s *grpcServer) Hello9(ctx context.Context, req *pb.Hello9Request) (*pb.Hello9Response, error) {
	_, resp, err := s.Hello9Handler.ServeGRPC(ctx, req)
	if err != nil {
		return nil, EncodeError(err)
	}
	return resp.(*pb.Hello9Response), nil
}
